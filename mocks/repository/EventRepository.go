// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	model "github.com/javiertlopez/golang-bootcamp-2020/model"
	mock "github.com/stretchr/testify/mock"
)

// EventRepository is an autogenerated mock type for the EventRepository type
type EventRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: event
func (_m *EventRepository) Create(event model.Event) (model.Event, error) {
	ret := _m.Called(event)

	var r0 model.Event
	if rf, ok := ret.Get(0).(func(model.Event) model.Event); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *EventRepository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *EventRepository) GetAll() ([]model.Event, error) {
	ret := _m.Called()

	var r0 []model.Event
	if rf, ok := ret.Get(0).(func() []model.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *EventRepository) GetByID(id string) (model.Event, error) {
	ret := _m.Called(id)

	var r0 model.Event
	if rf, ok := ret.Get(0).(func(string) model.Event); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: event
func (_m *EventRepository) Update(event model.Event) (model.Event, error) {
	ret := _m.Called(event)

	var r0 model.Event
	if rf, ok := ret.Get(0).(func(model.Event) model.Event); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Get(0).(model.Event)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
